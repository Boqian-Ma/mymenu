Week 1
* Had team meetings to discuss project
* Understood requirements for project proposal 

Week 2
* Setup my access to Jira & GH etc
* Discussed technology stack with team
    * Agreed I'd setup the backend in Go 
    * After initial setup other people could help out with specific APIs

Week 3
* Wrote the software architecture section of the report
    * Incl setting up our architecture diagram
* Drafted inital API specs and got signoff from Adam & Jeremy
* Setup the framework for the backend, including
    * Code-generated documentation
    * DB versioning scheme
    * DB interface to handle generic functionality
    * HTTP midddlewares to handle error responses etc
    * Session based authentication
* Wrote the inital APIs
    * POST /register - allows users to signup to our app
    * POST /login - login & retrieve session token
    * GET /users/:id - returns user details
    * PUT /users/:id - updates user details

Week 4
* Wrote next set of APIs
    * POST /restaurants - used by managers to create restaurants
    * GET /restaurants
        * used by customers to get a list of all restaurants
        * or by managers to get a list of their restaurants
    * PUT /restaurants/:id - used by managers to update their restaurant's details
    * GET /restaurants/:id - used by anyone to get a specific restaurant's details
* Talked Adam through the BE layout and worked on spec for menu_items APIs
  so he can work on them himself

Week 5
* Considered ways of improving our testing
    * Most things we considered would take too long to setup given the timeframe of the project
    * Decided to automatically populate the DB with some data & manually test from there

Week 6
* Designed the ordering api's spec with @adam

Week 7
* Implemented guest user authentication
    * POST /login/guest
    * (Still allows them to set a password etc in order to keep the account)

Week 8
* Update software architecture diagram & design paragraphs for final report

Week 9
* Added the rest of the assigned BE sections to the report
    * impl challenges
    * user & restaurant entities
    * ..

